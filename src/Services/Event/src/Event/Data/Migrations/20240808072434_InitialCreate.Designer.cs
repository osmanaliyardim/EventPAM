// <auto-generated />
using System;
using EventPAM.Event.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventPAM.Event.Data.Migrations
{
    [DbContext(typeof(EventDbContext))]
    [Migration("20240808072434_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventPAM.Event.Events.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Unknown")
                        .HasColumnName("status");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid")
                        .HasColumnName("venue_id");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_event");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_event_venue_id");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("EventPAM.Event.Seats.Models.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Class")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Unknown")
                        .HasColumnName("class");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified_by");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_seat");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_seat_event_id");

                    b.ToTable("seat", (string)null);
                });

            modelBuilder.Entity("EventPAM.Event.Venues.Models.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified_by");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_venue");

                    b.ToTable("venue", (string)null);
                });

            modelBuilder.Entity("EventPAM.Event.Events.Models.Event", b =>
                {
                    b.HasOne("EventPAM.Event.Venues.Models.Venue", null)
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_venue_venue_id");

                    b.OwnsOne("EventPAM.Event.Events.ValueObjects.DurationMinutes", "DurationMinutes", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Value")
                                .HasMaxLength(50)
                                .HasColumnType("numeric")
                                .HasColumnName("duration_minutes");

                            b1.HasKey("EventId")
                                .HasName("pk_event");

                            b1.ToTable("event");

                            b1.WithOwner()
                                .HasForeignKey("EventId")
                                .HasConstraintName("fk_event_event_id");
                        });

                    b.OwnsOne("EventPAM.Event.Events.ValueObjects.EventDate", "EventDate", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("event_date");

                            b1.HasKey("EventId")
                                .HasName("pk_event");

                            b1.ToTable("event");

                            b1.WithOwner()
                                .HasForeignKey("EventId")
                                .HasConstraintName("fk_event_event_id");
                        });

                    b.OwnsOne("EventPAM.Event.Events.ValueObjects.EventNumber", "EventNumber", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("event_number");

                            b1.HasKey("EventId")
                                .HasName("pk_event");

                            b1.ToTable("event");

                            b1.WithOwner()
                                .HasForeignKey("EventId")
                                .HasConstraintName("fk_event_event_id");
                        });

                    b.OwnsOne("EventPAM.Event.Events.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Value")
                                .HasMaxLength(10)
                                .HasColumnType("numeric")
                                .HasColumnName("price");

                            b1.HasKey("EventId")
                                .HasName("pk_event");

                            b1.ToTable("event");

                            b1.WithOwner()
                                .HasForeignKey("EventId")
                                .HasConstraintName("fk_event_event_id");
                        });

                    b.Navigation("DurationMinutes")
                        .IsRequired();

                    b.Navigation("EventDate")
                        .IsRequired();

                    b.Navigation("EventNumber")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("EventPAM.Event.Seats.Models.Seat", b =>
                {
                    b.HasOne("EventPAM.Event.Events.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_seat_event_event_id");

                    b.OwnsOne("EventPAM.Event.Seats.ValueObjects.SeatNumber", "SeatNumber", b1 =>
                        {
                            b1.Property<Guid>("SeatId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("seat_number");

                            b1.HasKey("SeatId")
                                .HasName("pk_seat");

                            b1.ToTable("seat");

                            b1.WithOwner()
                                .HasForeignKey("SeatId")
                                .HasConstraintName("fk_seat_seat_id");
                        });

                    b.Navigation("SeatNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("EventPAM.Event.Venues.Models.Venue", b =>
                {
                    b.OwnsOne("EventPAM.Event.Venues.ValueObjects.Capacity", "Capacity", b1 =>
                        {
                            b1.Property<Guid>("VenueId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Value")
                                .HasMaxLength(6)
                                .HasColumnType("integer")
                                .HasColumnName("capacity");

                            b1.HasKey("VenueId")
                                .HasName("pk_venue");

                            b1.ToTable("venue");

                            b1.WithOwner()
                                .HasForeignKey("VenueId")
                                .HasConstraintName("fk_venue_venue_id");
                        });

                    b.OwnsOne("EventPAM.Event.Venues.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("VenueId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name");

                            b1.HasKey("VenueId")
                                .HasName("pk_venue");

                            b1.ToTable("venue");

                            b1.WithOwner()
                                .HasForeignKey("VenueId")
                                .HasConstraintName("fk_venue_venue_id");
                        });

                    b.Navigation("Capacity")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
